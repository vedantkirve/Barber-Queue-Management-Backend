// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  phoneNumber String?  @unique // Made unique to prevent duplicate phone numbers
  firstName   String?
  lastName    String?
  email       String?
  password    String? // Made optional
  role        Role
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barberShops BarberShop[]
  visits      Visit[] // Add relation to visits
}

enum Role {
  customer
  shopkeeper
}

model BarberShop {
  id        String   @id @default(uuid())
  userId    String
  name      String
  address   String
  latitude  Float?
  longitude Float?
  isOpen    Boolean  @default(true)
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  services Service[]
  visits   Visit[] // Add relation to visits
  shopQueues ShopQueue[] // Add relation to shop queues
}

model Service {
  id            String   @id @default(uuid())
  barberShopId  String
  serviceName   String
  price         Float
  estimatedTime Int // in minutes
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  barberShop    BarberShop     @relation(fields: [barberShopId], references: [id])
  visitServices VisitService[] // Add relation to visit services
}

model Visit {
  id           String   @id @default(uuid())
  userId       String? // Optional - for unregistered customers
  barberShopId String
  totalAmount  Float
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopQueueId  String?     @unique // Optional - for linking to ShopQueue (one-to-one)
  shopQueue    ShopQueue?  @relation(fields: [shopQueueId], references: [id])

  user          User?          @relation(fields: [userId], references: [id])
  barberShop    BarberShop     @relation(fields: [barberShopId], references: [id])
  visitServices VisitService[]
}

model VisitService {
  id           String   @id @default(uuid())
  visitId      String
  serviceId    String
  chargedPrice Float // Actual price charged during visit
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  visit   Visit   @relation(fields: [visitId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([visitId, serviceId]) // Prevent duplicate services in same visit
}

model ShopQueue {
  id            String      @id @default(uuid())
  barberShopId  String
  userId        String      // Reference to user (no relation)
  state         QueueState  @default(in_queue)
  joinedAt      DateTime    @default(now())
  servedAt      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        String      @default("active") // Add status field for soft delete

  barberShop    BarberShop  @relation(fields: [barberShopId], references: [id])
  visit         Visit?      // One-to-one relation with Visit

  @@index([barberShopId, state])
}

enum QueueState {
  in_queue
  picked
  served
}
